rem
rem	Script:		trans_close_01.sql
rem	Author:		Jonathan Lewis
rem	Dated:		Sep 2004
rem	Purpose:	Example for "Cost Based Oracle"
rem
rem	Last tested:
rem		10.1.0.4
rem		 9.2.0.6
rem		 8.1.7.4
rem
rem	A simple (and silly) case of a predicate appearing by magic
rem	The execution plan shows a cardinality of 10, when the only
rem	visible predicate allows for one row in 10, which means a
rem	calculated cardinality of 100.
rem
rem	If Oracle were using its 'unknown value' rule to supply a
rem	selectivity on the n1 = n2, then it would use 5%, and the
rem	100 would drop to 5. 
rem
rem	If we check the filter_predicates column in a full execution
rem	path output (9i onwards), we see that the predicate Oracle used is:
rem		Filter ("T1"."N1"=100 AND "T1"."N2"=100)
rem	The t1.n2 = 100 has been generated by transitive closure, and
rem	the predicate t1.n1 = t2.n2 has been supressed.
rem
rem	There is an annoying issue though. Re-run this test with 
rem	query_rewrite_enabled = true, and the rules on equalities
rem	and transitive closure change. The cardinality of the second
rem	query drops from 10 to 3 - because the join predicate is no
rem	longer discarded. (This bring the rule for equality predicates
rem	in line with the rules for other types of predicate).
rem

start setenv

drop table t1;

begin
	begin		execute immediate 'purge recyclebin';
	exception	when others then null;
	end;

	begin		execute immediate 'begin dbms_stats.delete_system_stats; end;';
	exception 	when others then null;
	end;

	begin		execute immediate 'alter session set "_optimizer_cost_model"=io';
	exception	when others then null;
	end;

end;
/


create table t1 
as
select
	mod(rownum,10)		n1,
	mod(rownum,10)		n2,
	to_char(rownum)		small_vc,
	rpad('x',100)		padding
from
	all_objects
where
	rownum <= 1000
;



begin
	dbms_stats.gather_table_stats(
		user,
		't1',
		cascade => true,
		estimate_percent => null,
		method_opt => 'for all columns size 1'
	);
end;
/

spool trans_close_01

rem	alter session set query_rewrite_enabled = true;
set autotrace traceonly explain

select
	small_vc
from
	t1
where
	n1 = 5
;

select
	small_vc
from
	t1
where
	n1 = 5
and	n2 = n1
;

set autotrace off


spool of

set doc off
doc


Execution plans for the query where n2 = n1
============================================

Autotrace - 8.1.7.4 - query_rewrite_enabled = false
----------------------------------------------------------
   0      SELECT STATEMENT Optimizer=ALL_ROWS (Cost=3 Card=11 Bytes=110)
   1    0   TABLE ACCESS (FULL) OF 'T1' (Cost=3 Card=11 Bytes=110)


Execution Plan - 8.1.7.4 - query_rewrite_enabled = true
----------------------------------------------------------
   0      SELECT STATEMENT Optimizer=ALL_ROWS (Cost=3 Card=2 Bytes=20)
   1    0   TABLE ACCESS (FULL) OF 'T1' (Cost=3 Card=2 Bytes=20)



#
